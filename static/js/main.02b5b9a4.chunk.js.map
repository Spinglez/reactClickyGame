{"version":3,"sources":["components/Cards.js","components/Header.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["Styles","cardStyles","width","imgStyles","height","Cards","props","react_default","a","createElement","key","id","className","style","onClick","selectImage","src","image","alt","name","headerStyles","position","zIndex","top","Header","Fragment","message","score","topScore","styles","BodyStyles","titleStyle","pStyle","CardBoxStyle","margin","shuffle","i","length","j","Math","floor","random","_ref","Body","state","images","clickedArray","wrongGuess","_this","setState","rightGuess","scoreEval","winGame","prevState","concat","Object","toConsumableArray","includes","this","_this2","components_Header","map","components_Cards","React","Component","App","components_Body","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02b5b9a4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Styles = {\r\n  cardStyles: {\r\n    width: '18rem'\r\n  },\r\n  imgStyles: {\r\n    width: '15rem',\r\n    height: '15rem'\r\n  }\r\n}\r\n\r\nconst Cards = props => {\r\n\r\n    return (\r\n      <div key={props.id} className=\"card hvr-grow mt-3 mb-3 mx-auto rounded border border-secondary shadow p-3 mb-5 bg-white rounded\" style={Styles.cardStyles}>\r\n        <img onClick={() => props.selectImage(props.id)} style={Styles.imgStyles} src={props.image} className=\"card-img-top\" alt={props.name}></img>\r\n      </div>\r\n    )}\r\n\r\nexport default Cards\r\n","import React from \"react\";\r\n\r\nconst Styles = {\r\n  headerStyles: {\r\n    position:'fixed',\r\n    width: '100%',\r\n    zIndex: '65',\r\n    top: 0\r\n  }\r\n}\r\n\r\nconst Header = props => {\r\n  return (\r\n    <>\r\n      <nav style={Styles.headerStyles} className=\"navbar navbar-default navbar-fixed-top navbar-light bg-light\">\r\n        <div className=\"container\">\r\n          <span className=\"navbar-brand mb-0 h1\">Clicky Game!</span>\r\n          <span>{props.message}</span>\r\n          <span> Score: {props.score} | Highscore: {props.topScore} </span>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react'\r\nimport Cards from './Cards'\r\nimport Header from './Header'\r\nimport images from '../images.json'\r\n\r\nconst styles = {\r\n  BodyStyles: {\r\n    height: \"14rem\"\r\n  },\r\n  titleStyle:  {\r\n    position: 'relative',\r\n    top: \"75px\"\r\n  },\r\n    pStyle: {\r\n    position: 'relative',\r\n    top: '85px'\r\n  },\r\n  CardBoxStyle:{\r\n    margin: 'auto'\r\n  }\r\n};\r\n\r\nfunction shuffle(a) {\r\n    for (let i = a.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [a[i], a[j]] = [a[j], a[i]];\r\n    }\r\n    return a;\r\n}\r\n\r\n\r\n\r\nclass Body extends React.Component {\r\n  state = {\r\n    images,\r\n    score: 0,\r\n    topScore: 0,\r\n    message: 'Click a picture to get started',\r\n    clickedArray : []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({images: shuffle(images)});\r\n  };\r\n\r\n  wrongGuess = () => {\r\n    this.setState({message : 'Wrong guess!!'})\r\n    this.setState({score: 0})\r\n    this.setState({clickedArray: []})\r\n    this.setState({images: shuffle(images)})\r\n  };\r\n\r\n  rightGuess = () => {\r\n    this.setState({message : 'Correct!'})\r\n    this.scoreEval()\r\n    this.setState({images: shuffle(images)})\r\n  }\r\n\r\n  winGame = () => {\r\n    this.setState({message: 'Congratulations you won! Click to play again'})\r\n    this.setState({score: 0})\r\n    this.setState({clickedArray: []})\r\n  }\r\n\r\n  scoreEval = () => {\r\n    this.setState((prevState, props) => ({\r\n    score: prevState.score + 1\r\n    }));\r\n    if (this.state.score === 9) {\r\n      this.winGame()\r\n    }\r\n    else if (this.state.score >= this.state.topScore) {\r\n      this.setState((prevState, props) => ({\r\n      topScore: prevState.topScore + 1\r\n      }));\r\n    }\r\n  }\r\n\r\n  selectImage = (id) => {\r\n    this.setState({ clickedArray: [...this.state.clickedArray, id] })\r\n    if (this.state.clickedArray.includes(id)) {\r\n      this.wrongGuess();\r\n    }else {\r\n      this.rightGuess();\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <>\r\n        <Header\r\n          score={this.state.score}\r\n          topScore={this.state.topScore}\r\n          message={this.state.message}\r\n        />\r\n        <div style={styles.BodyStyles} className=\"bg-dark\">\r\n          <div className=\"col\">\r\n            <div style={styles.titleStyle} className=\"row align-items mt-3\">\r\n              <h1 className=\"text-light m-auto\">It's Game Time!</h1>\r\n            </div>\r\n            <div style={styles.pStyle} className=\"row alight-items\">\r\n              <p className=\"text-light m-auto\">Click an image to get started but dont click the same picture twice!</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"container bg-warning mt-3\">\r\n          <div style={styles.CardBoxStyle} className=\"row\">\r\n          {this.state.images.map(image =>(\r\n            <Cards\r\n              id={image.id}\r\n              key={image.id}\r\n              name={image.name}\r\n              image={image.image}\r\n              selectImage={this.selectImage}\r\n              />\r\n          ))}\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n};\r\n\r\nexport default Body\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Body from './components/Body'\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Body />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}